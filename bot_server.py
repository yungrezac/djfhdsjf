# bot_server.py
# –°–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å –¥–ª—è Telegram-–±–æ—Ç–∞ TerraRun

import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, InlineQueryHandler
from supabase import create_client, Client
import uuid

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∫–ª—é—á–∏ –¥–ª—è Supabase –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
# –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± —Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
# –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ:
# export TELEGRAM_TOKEN="8203577700:AAHBPcxw4y5kT4trl_bfZY4QRBQ99Q0S2E8"
# export SUPABASE_URL="https://jsnahjtoqwuwbjdmisuj.supabase.co"
# export SUPABASE_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpzbmFoanRvcXd1d2JqZG1pc3VqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMzOTQxMDQsImV4cCI6MjA2ODk3MDEwNH0.M3TWsNJppj1f-Cmj6nGCAUswy1HZgBLW8yJZfTwkrpI"

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
MINI_APP_URL = "https://t.me/TerraRunBot/app" # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∑–¥–µ—Å—å –≤–µ—Ä–Ω–æ–µ

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω—ã
if not all([TELEGRAM_TOKEN, SUPABASE_URL, SUPABASE_KEY]):
    raise ValueError("–û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN, SUPABASE_URL –∏–ª–∏ SUPABASE_KEY")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase ---
# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
    exit(1)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å Mini App."""
    user = update.effective_user
    user_id = user.id
    first_name = user.first_name

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏ –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ.
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        response = supabase.table("profiles").select("id").eq("id", user_id).execute()
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not response.data:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_name} (ID: {user_id}).")
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            color_hash = hash(str(user_id)) % 360
            user_color = f"hsl({color_hash}, 80%, 65%)"

            insert_response = supabase.table("profiles").insert({
                "id": user_id,
                "name": first_name,
                "photo_url": user.photo_url if hasattr(user, 'photo_url') else None,
                "color": user_color,
                "area": 0
            }).execute()
            if insert_response.data:
                 logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è {first_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
            else:
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è {first_name}.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_name} –≤ Supabase: {e}")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—à–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    keyboard = [
        [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TerraRun", web_app={"url": MINI_APP_URL})],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TerraRun. "
        "–ì–æ—Ç–æ–≤—ã –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=reply_markup,
    )


async def location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è Live Location)."""
    message = update.edited_message if update.edited_message else update.message
    if not message or not message.location:
        return

    user_id = message.from_user.id
    user_location = message.location
    lat = user_location.latitude
    lon = user_location.longitude
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: lat={lat}, lon={lon}")

    # –°–æ–∑–¥–∞–µ–º GeoJSON –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase
    # Supabase –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å PostGIS, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–∞–∫ JSON
    last_location_geojson = {
        "type": "Point",
        "coordinates": [lon, lat]
    }

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ last_known_location –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = supabase.table("profiles").update({
            "last_known_location": last_location_geojson,
            "updated_at": "now()" # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        }).eq("id", user_id).execute()
        
        if response.data:
            logger.info(f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            # –≠—Ç–æ –º–æ–∂–µ—Ç —Å–ª—É—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–µ–æ –¥–æ –∫–æ–º–∞–Ω–¥—ã /start
            logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {e}")

async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π."""
    query = update.inline_query.query

    if not query.startswith("user_"):
        return

    try:
        user_id_to_find = int(query.split("_")[1])
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        response = supabase.table("profiles").select("*").eq("id", user_id_to_find).single().execute()
        profile = response.data

        if not profile:
            return

        area = profile.get('area', 0)
        formatted_area = f"{(area / 1000000):.2f} –∫–º¬≤" if area > 10000 else f"{round(area)} –º¬≤"
        
        title = f"–ü—Ä–æ—Ñ–∏–ª—å {profile['name']} –≤ TerraRun"
        description = f"–ó–∞—Ö–≤–∞—á–µ–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è: {formatted_area}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        keyboard = [[InlineKeyboardButton("üöÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ TerraRun", url=f"{MINI_APP_URL}?startapp=user{profile['id']}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        result = InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title=title,
            description=description,
            input_message_content=InputTextMessageContent(
                f"üåç –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, —á–µ–≥–æ –¥–æ—Å—Ç–∏–≥(–ª–∞) {profile['name']} –≤ TerraRun! –ï–≥–æ/–µ–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {formatted_area}."
            ),
            reply_markup=reply_markup,
            thumbnail_url=profile.get('photo_url') or "https://placehold.co/100x100/3b82f6/ffffff?text=TR"
        )
        
        await update.inline_query.answer([result], cache_time=5)

    except (ValueError, IndexError, Exception) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–µ: {e}")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.LOCATION, location))
    application.add_handler(InlineQueryHandler(inline_query))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±—Ö—É–∫–∏)
    application.run_polling()


if __name__ == "__main__":
    main()
